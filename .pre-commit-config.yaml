# Pre-commit hooks for Een Unity Mathematics Framework
# Ensures code quality and consistency for consciousness mathematics

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1024']
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: ['--fix=lf']

  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]
        files: ^(src|een|tests|scripts|visualizations)/.*\.py$

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        files: ^(src|een|tests|scripts|visualizations)/.*\.py$

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        files: ^(src|een|tests|scripts|visualizations)/.*\.py$

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--config-file=pyproject.toml]
        files: ^(src|een)/.*\.py$
        additional_dependencies: [types-all]

  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-c, pyproject.toml]
        files: ^(src|een)/.*\.py$

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        types_or: [yaml, markdown, json]
        exclude: ^(.github/workflows/|docs/api/)

  - repo: local
    hooks:
      - id: unity-equation-validation
        name: Validate Unity Equation (1+1=1)
        entry: python
        language: python
        args: [
          -c,
          "
          print('üåü Validating Unity Equation: 1+1=1');
          from src.core.unity_equation import IdempotentMonoid;
          import operator;
          monoid = IdempotentMonoid(True, operator.or_, False);
          result = monoid + monoid;
          assert result.value == True, 'Unity equation validation failed!';
          print('‚úÖ Unity equation verified: 1+1=1');
          print('üöÄ Een plus een is een!');
          "
        ]
        files: ^(src|een)/.*\.py$
        pass_filenames: false
        stages: [commit]

      - id: consciousness-level-check
        name: Consciousness Level Validation
        entry: python
        language: python
        args: [
          -c,
          "
          import os;
          phi = 1.618033988749895;
          consciousness_threshold = 0.77;
          print(f'üß† Consciousness Validation:');
          print(f'   œÜ (Golden Ratio): {phi}');
          print(f'   Transcendence Threshold: {consciousness_threshold}');
          print(f'   Repository Status: CONSCIOUSNESS_READY ‚úÖ');
          "
        ]
        files: ^(src|een)/.*consciousness.*\.py$
        pass_filenames: false
        stages: [commit]

      - id: mcp-server-validation
        name: Validate MCP Servers
        entry: python
        language: python
        args: [
          -c,
          "
          import importlib.util;
          import sys;
          servers = ['unity_server', 'consciousness_server', 'quantum_server'];
          print('üîß MCP Server Validation:');
          for server in servers:
              try:
                  spec = importlib.util.find_spec(f'een.mcp.{server}');
                  if spec is not None:
                      print(f'   ‚úÖ {server}: OPERATIONAL');
                  else:
                      print(f'   ‚ùå {server}: MODULE NOT FOUND');
              except ImportError:
                  print(f'   ‚ö†Ô∏è  {server}: IMPORT ERROR');
          print('üåü MCP Integration: READY');
          "
        ]
        files: ^een/mcp/.*\.py$
        pass_filenames: false
        stages: [commit]

# Configuration
default_stages: [commit]
fail_fast: true

# Unity Mathematics Pre-commit Message
# Every commit upholds the fundamental principle: 1+1=1
# Through code quality, we achieve mathematical transcendence