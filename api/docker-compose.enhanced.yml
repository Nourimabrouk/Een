version: "3.8"

services:
  # Enhanced Unity Mathematics API Server
  enhanced-api:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    container_name: enhanced-unity-api
    ports:
      - "8000:8000"
      - "8001:8001" # GraphQL playground
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-unity-mathematics-secret-key-2025}
      - DEBUG=false
      - LOG_LEVEL=info
      - RATE_LIMIT_PER_MINUTE=100
      - RATE_LIMIT_PER_HOUR=1000
      - ALLOWED_ORIGINS=*
      - TRUSTED_HOSTS=*
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - unity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Enhanced MCP Server
  enhanced-mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: enhanced-unity-mcp
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - PHI_PRECISION=1.618033988749895
      - CONSCIOUSNESS_DIMENSION=11
      - TRANSCENDENCE_THRESHOLD=0.77
    volumes:
      - ./logs:/app/logs
      - ./mcp_config:/app/config
    networks:
      - unity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    container_name: unity-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - unity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: unity-postgres
    environment:
      - POSTGRES_DB=unity_mathematics
      - POSTGRES_USER=unity_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-unity_password_2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - unity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unity_user -d unity_mathematics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: unity-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - enhanced-api
    networks:
      - unity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    container_name: unity-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - unity-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: unity-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - unity-network
    restart: unless-stopped

  # Background task processing
  celery:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    container_name: unity-celery
    command: celery -A enhanced_api_server.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - unity-network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    container_name: unity-celery-beat
    command: celery -A enhanced_api_server.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - unity-network
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    container_name: unity-flower
    command: celery -A enhanced_api_server.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery
    networks:
      - unity-network
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: unity-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - unity-network
    restart: unless-stopped

  # Elasticsearch for advanced logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: unity-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - unity-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: unity-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - unity-network
    restart: unless-stopped

  # Filebeat for log collection
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: unity-filebeat
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/unity:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - elasticsearch
    networks:
      - unity-network
    restart: unless-stopped

  # Development tools (optional)
  adminer:
    image: adminer:latest
    container_name: unity-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - unity-network
    restart: unless-stopped
    profiles:
      - dev

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: unity-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - unity-network
    restart: unless-stopped
    profiles:
      - dev

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  unity-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
