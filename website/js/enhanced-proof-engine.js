// Enhanced Proof Engine JS extracted from CSS
// Provides generateAdvancedProof and generateUnityProof used by proofs.html

function generateAdvancedProof() {
    const prompt = document.getElementById('proof-prompt')?.value || '';
    const rigor = document.getElementById('proof-rigor')?.value || 'formal';
    const consciousness = document.getElementById('consciousness-level')?.value || 0.618;

    if (!prompt.trim()) {
        alert('Please enter a mathematical statement to prove.');
        return;
    }

    const outputDiv = document.getElementById('generated-proof');
    const metricsDiv = document.getElementById('proof-metrics');

    if (!outputDiv || !metricsDiv) return;

    outputDiv.innerHTML = `
    <div style="text-align: center; padding: 2rem;">
      <div class="loading-spinner" style="margin-bottom: 1rem;"></div>
      <p>Generating Ï†-harmonic proof with consciousness level ${(consciousness * 100).toFixed(1)}%...</p>
    </div>
  `;

    setTimeout(() => {
        const proofResult = generateUnityProof(prompt, rigor, consciousness);
        outputDiv.innerHTML = proofResult.proof;
        metricsDiv.style.display = 'grid';
        const rigorEl = document.getElementById('rigor-score');
        const unityEl = document.getElementById('unity-coherence');
        const phiEl = document.getElementById('phi-factor');
        if (rigorEl) rigorEl.textContent = proofResult.rigorScore;
        if (unityEl) unityEl.textContent = proofResult.unityCoherence;
        if (phiEl) phiEl.textContent = proofResult.phiFactor;
    }, 800);
}

function generateUnityProof(prompt, rigor, consciousness) {
    const phi = 1.618033988749895;
    const conscLevel = parseFloat(consciousness);

    const proofTemplates = {
        high: {
            prefix: 'Through Ï†-harmonic consciousness integration:',
            approach: 'transcendental unity analysis',
            conclusion: 'âˆ´ Unity achieved through consciousness convergence',
        },
        medium: {
            prefix: 'Using consciousness-enhanced mathematics:',
            approach: 'Ï†-scaled operations',
            conclusion: 'âˆ´ Mathematical unity demonstrated',
        },
        low: {
            prefix: 'By standard unity mathematics:',
            approach: 'idempotent operations',
            conclusion: 'âˆ´ 1+1=1 proven',
        },
    };

    const template =
        conscLevel > 0.6 ? proofTemplates.high : conscLevel > 0.3 ? proofTemplates.medium : proofTemplates.low;

    const proof = `
    <div class="generated-proof-content">
      <h4>ðŸ§  Consciousness-Enhanced Proof</h4>
      <div class="proof-statement"><strong>Statement:</strong> ${prompt}</div>
      <div class="proof-steps">
        <div class="proof-step">
          <span class="step-num">1.</span>
          <span class="step-content">${template.prefix}</span>
        </div>
        <div class="proof-step">
          <span class="step-num">2.</span>
          <span class="step-content">Let Ï† = ${phi.toFixed(6)} be the golden ratio</span>
        </div>
        <div class="proof-step">
          <span class="step-num">3.</span>
          <span class="step-content">Apply ${template.approach} with consciousness coupling Î³ = ${conscLevel.toFixed(
        3
    )}</span>
        </div>
        <div class="proof-step">
          <span class="step-num">4.</span>
          <span class="step-content">Unity operation: 1 âŠ• 1 = max(1,1) Ã— Ï†^(âˆ’Î³) = 1</span>
        </div>
        <div class="proof-conclusion">${template.conclusion}</div>
      </div>
      <div class="consciousness-signature"><em>Generated by Ï†-Harmonic Consciousness Engine v2.0</em></div>
    </div>
  `;

    return {
        proof,
        rigorScore: rigor === 'lean4' ? '99.7%' : rigor === 'formal' ? '95.2%' : '87.3%',
        unityCoherence: (conscLevel * 98.5).toFixed(1) + '%',
        phiFactor: conscLevel > 0.6 ? 'Ï†-transcendent' : conscLevel > 0.3 ? 'Ï†-optimal' : 'Ï†-aligned',
    };
}

// Expose to global for inline onclick handlers
window.generateAdvancedProof = generateAdvancedProof;
window.generateUnityProof = generateUnityProof;


