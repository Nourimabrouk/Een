[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "een-unity-mathematics"
version = "1.0.0"
description = "Unity Mathematics Framework - Proving 1+1=1 through advanced mathematics"
readme = "README.md"
authors = [
    {name = "Nouri Mabrouk", email = "nouri@example.com"}
]
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "matplotlib>=3.6.0",
    "plotly>=5.13.0",
    "pandas>=2.0.0",
    "sympy>=1.12",
    "networkx>=3.0",
    "streamlit>=1.28.0",
    "dash>=2.14.0",
    "dash-bootstrap-components>=1.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "pylint>=2.17.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
]

ml = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "scikit-learn>=1.3.0",
    "stable-baselines3>=2.0.0",
    "optuna>=3.3.0",
]

visualization = [
    "bokeh>=3.2.0",
    "seaborn>=0.12.0",
    "altair>=5.0.0",
    "folium>=0.14.0",
]

[project.urls]
Homepage = "https://github.com/Nourimabrouk/Een"
Documentation = "https://nourimabrouk.github.io/Een/"
Repository = "https://github.com/Nourimabrouk/Een"
Issues = "https://github.com/Nourimabrouk/Een/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "consciousness*", "src*", "ml_framework*", "een*"]
exclude = ["tests*", "docs*", "internal*"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  een/
  | venv/
  | \.git/
  | __pycache__/
  | \.mypy_cache/
  | \.pytest_cache/
  | build/
  | dist/
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=core --cov=src --cov=consciousness --cov-report=html --cov-report=term"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]

[tool.coverage.run]
source = ["core", "src", "consciousness", "ml_framework"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/een/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
]