*** Begin Patch
*** Update File: core/unity_mathematics.py
@@ class UnityMathematics:
-         # φ-harmonic idempotent addition
-         # The golden ratio provides natural convergence to unity
-         phi_scaled_a = self.phi * state_a.value
-         phi_scaled_b = self.phi * state_b.value
-         
-         # Idempotent combination through φ-harmonic resonance
-         combined_value = (phi_scaled_a + phi_scaled_b) / (self.phi + 1)
+         # φ-harmonic idempotent addition
+         # Use reciprocal φ weighting so that 1 ⊕ 1 = 1 exactly.  We weight one operand
+         # by φ and the other by 1/φ, then normalise by (φ + 1/φ).  When a = b = 1
+         # this yields (φ + 1/φ)/(φ + 1/φ) = 1, preserving the unity principle.
+         phi_scaled_a = self.phi * state_a.value
+         phi_scaled_b = (1.0 / self.phi) * state_b.value
+         
+         # Idempotent combination through φ-harmonic resonance
+         combined_value = (phi_scaled_a + phi_scaled_b) / (self.phi + 1.0 / self.phi)
*** End Patch

*** Begin Patch
*** Update File: core/consciousness_api.py
@@ class PhiHarmonic:
-         elif isinstance(value, dict):
-             return {k: self._apply_phi_resonance(v) for k, v in value.items()}
-         return value
+         elif isinstance(value, dict):
+             return {k: self._apply_phi_resonance(v) for k, v in value.items()}
+         elif isinstance(value, set):
+             # Apply φ-resonance to each element of a set
+             return {self._apply_phi_resonance(v) for v in value}
+         return value
*** End Patch
