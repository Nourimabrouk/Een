# Production-ready Docker Compose configuration for Een Unity Mathematics

services:
  # Main API service
  api:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
      args:
        PYTHON_VERSION: "3.11"
    container_name: een-api
    restart: unless-stopped
    init: true
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL:-postgresql://een:${DB_PASSWORD:-een_unity_123}@postgres:5432/een}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Unity Dashboard service
  dashboard:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    container_name: een-dashboard
    restart: unless-stopped
    init: true
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - DASHBOARD_PORT=8050
    command: ["python", "dashboards/unity_dashboard.py"]
    ports:
      - "${DASHBOARD_PORT:-8050}:8050"
    volumes:
      - ../logs:/app/logs
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consciousness monitoring service
  consciousness-monitor:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    container_name: een-consciousness-monitor
    restart: unless-stopped
    init: true
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
    command: ["python", "monitoring/monitoring.py"]
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data
    depends_on:
      - redis
      - api

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: een-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: een-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=een
      - POSTGRES_USER=een
      - POSTGRES_PASSWORD=${DB_PASSWORD:-een_unity_123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U een"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: een-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - ../static:/usr/share/nginx/html/static:ro
    depends_on:
      - api
      - dashboard
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: een-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    depends_on:
      - api

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: een-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  default:
    name: een-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
