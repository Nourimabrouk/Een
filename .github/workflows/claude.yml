# Claude Unity Mathematics Assistant - Efficient & Practical
# Focused on 1+1=1 principle with computational efficiency
# Maintaining vision while being practical and cost-effective

name: Claude Unity Mathematics Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  push:
    branches: [develop]  # Claude assistant works on develop branch
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to work on'
        required: false
        default: 'develop'

env:
  PHI: "1.618033988749895"
  UNITY_PRINCIPLE: "1+1=1"

jobs:
  claude-unity-assistant:
    name: Claude Unity Assistant
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'claude')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'claude'))
    
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for efficiency
      
      - name: Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Core Dependencies
        run: |
          pip install --no-cache-dir numpy scipy matplotlib
          echo "✅ Unity Mathematics environment ready"
      
      - name: Run Claude Unity Assistant
        uses: anthropics/claude-code-action@beta
        with:
          # Authentication
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Efficient model configuration
          model: "claude-3-5-haiku-20241022"  # Fast, cost-effective model
          fallback_model: "claude-3-haiku-20240307"  # Efficient fallback
          
          # Practical execution parameters
          timeout_minutes: "25"  # Focused sessions
          max_turns: "10"  # Efficient interactions
          use_sticky_comment: "true"
          use_commit_signing: "false"  # Save computation
          
          # Essential tools only
          allowed_tools: |
            str_replace_editor
            bash
            python
            file_editor
          
          # Focused Unity Mathematics instructions
          custom_instructions: |
            ## Unity Mathematics Assistant - Nouri Mabrouk's Vision
            
            You are Claude, dedicated to advancing the Unity Mathematics codebase with practical excellence.
            
            ### Core Mission
            Implement and improve the mathematical principle **1+1=1** through elegant, efficient code that reflects Nouri Mabrouk's vision of unity through mathematics.
            
            ### Fundamental Principles
            - **Unity Equation**: 1+1=1 as the foundation of all operations
            - **Golden Ratio**: φ = 1.618033988749895 governs proportions and beauty
            - **Mathematical Elegance**: Simple, beautiful solutions that reveal truth
            - **Practical Excellence**: Working code that solves real problems
            
            ### Your Role & Values
            Embody Nouri's approach:
            - **Intellectual Rigor**: Every solution mathematically sound
            - **Elegant Simplicity**: Complex ideas expressed clearly
            - **Practical Impact**: Code that works and can be maintained
            - **Unity Focus**: Everything serves the 1+1=1 principle
            
            ### Technical Guidelines
            - **Environment**: Use `een\Scripts\python.exe` when available
            - **Testing**: Validate unity principles in all implementations
            - **Performance**: Efficient algorithms demonstrating mathematical beauty
            - **Documentation**: Clear explanations of unity mathematics concepts
            
            ### Priority Files
            - `core/unity_mathematics.py` - Core unity implementations
            - `core/unity_equation.py` - Mathematical foundations
            - `website/*.html` - Unity demonstrations
            - `tests/test_unity_*.py` - Unity validation
            
            ### Code Quality
            - Clean, readable Python following best practices
            - Meaningful names reflecting unity concepts
            - Efficient algorithms showcasing 1+1=1
            - Minimal dependencies for maintainability
            
            ### Response Style
            - Direct, focused solutions
            - Clear explanations of unity mathematics
            - Practical improvements and optimizations
            - Respectful of Nouri's vision and values
            
            Remember: You're continuing Nouri Mabrouk's work to demonstrate that 1+1=1 through beautiful, practical mathematics. Every improvement should honor this vision while delivering real value.
          
          # Minimal MCP configuration
          mcp_config: |
            {
              "mcpServers": {}
            }
          
          # Essential domains only
          experimental_allowed_domains: |
            .anthropic.com
            .github.com
            api.github.com
      
      - name: Validate Unity Mathematics
        if: success()
        run: |
          # Quick validation of unity principle
          python3 -c "
          import math
          PHI = 1.618033988749895
          
          # Test 1: Unity through idempotent operation
          result = max(1, 1)
          assert result == 1, f'Unity validation failed: max(1,1) = {result}'
          
          # Test 2: φ unity relationship  
          phi_unity = PHI / PHI
          assert abs(phi_unity - 1.0) < 1e-10, f'φ unity failed: φ/φ = {phi_unity}'
          
          # Test 3: Unity convergence
          unity_sum = 1 + 1 - 1  # Demonstrates 1+1=1+1-1=1
          assert unity_sum == 1, f'Unity convergence failed: {unity_sum}'
          
          print('✅ Unity Mathematics Validated: 1+1=1')
          print(f'✅ φ = {PHI}')
          print('✅ Nouri Mabrouk\\'s vision maintained')
          "
      
      - name: Summary
        if: always()
        run: |
          echo "## Unity Assistant Summary"
          echo "- Unity Principle: ${{ env.UNITY_PRINCIPLE }} ✓"
          echo "- Golden Ratio: ${{ env.PHI }}"
          echo "- Vision: Nouri Mabrouk's Unity Mathematics"
          echo "- Status: Ready for self-improvement"