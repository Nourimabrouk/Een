name: Een AI Agent CI/CD Pipeline

on:
  # push: # DISABLED FOR COST OPTIMIZATION
  #   branches: [ main ]
  #   paths:
  #     - '**/*.py'
  #     - '**/*.md'
  #     - '**/*.html'
  #     - '**/*.js'
  #     - '**/*.css'
  #     - '**/*.json'
  #     - '**/*.txt'
  #     - 'ai_agent/**/*'
  #     - '.github/workflows/ai-ci.yml'
  
  # pull_request: # DISABLED FOR COST OPTIMIZATION
  #   branches: [ main ]
  #   paths:
  #     - '**/*.py'
  #     - '**/*.md'
  #     - '**/*.html'
  #     - 'ai_agent/**/*'
  
  workflow_dispatch:
    inputs:
      force_reindex:
        description: 'Force complete reindexing'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test AI Agent System
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai_agent/requirements.txt
        pip install pytest pytest-asyncio black isort
    
    - name: Code formatting check
      run: |
        black --check ai_agent/
        isort --check-only ai_agent/
    
    - name: Run tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ENVIRONMENT: test
      run: |
        pytest tests/test_ai_agent.py -v --tb=short
    
    - name: Validate configuration
      run: |
        python -c "
        import os
        from ai_agent import get_assistant_id
        print('✅ AI Agent configuration valid')
        "

  build-embeddings:
    name: Build Knowledge Embeddings
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai_agent/requirements.txt
    
    - name: Check for content changes
      id: content_changes
      run: |
        if [ "${{ github.event.inputs.force_reindex }}" = "true" ]; then
          echo "force_reindex=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check if content files have changed
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(py|md|html|js|css|json|txt|r|R)$' | head -20)
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "No content changes detected"
          echo "content_changed=false" >> $GITHUB_OUTPUT
        else
          echo "Content changes detected:"
          echo "$CHANGED_FILES"
          echo "content_changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Create embeddings
      if: steps.content_changes.outputs.content_changed == 'true' || steps.content_changes.outputs.force_reindex == 'true'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        EMBED_MODEL: text-embedding-3-large
        HARD_LIMIT_USD: ${{ vars.OPENAI_BUDGET_LIMIT || '20.0' }}
      run: |
        echo "🚀 Starting Een repository embedding process..."
        
        # Run the embedding pipeline
        cd ai_agent
        python prepare_index.py
        
        # Verify results
        if [ -f "processing_results.json" ]; then
          echo "✅ Embedding process completed successfully"
          python -c "
          import json
          with open('processing_results.json', 'r') as f:
              results = json.load(f)
          print(f'📊 Processed {results[\"stats\"][\"processed_files\"]} files')
          print(f'📝 Created {results[\"stats\"][\"total_chunks\"]} chunks')
          print(f'💰 Estimated cost: \${results[\"stats\"][\"estimated_cost_usd\"]:.4f}')
          print(f'🤖 Assistant ID: {results[\"assistant_id\"]}')
          "
        else
          echo "❌ Embedding process failed - no results file"
          exit 1
        fi
    
    - name: Commit updated embeddings
      if: steps.content_changes.outputs.content_changed == 'true' || steps.content_changes.outputs.force_reindex == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add embedding artifacts
        git add ai_agent/.assistant_id ai_agent/processing_results.json ai_agent/embedding_process.log
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No embedding changes to commit"
        else
          git commit -m "🤖 Update AI embeddings - $(date -u +%Y-%m-%d-%H-%M)"
          git push
          echo "✅ Embedding updates committed and pushed"
        fi

  deploy:
    name: Deploy AI Backend
    runs-on: ubuntu-latest
    needs: [test, build-embeddings]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Deploy to Render
      if: vars.RENDER_DEPLOY_HOOK_URL != ''
      run: |
        echo "🚀 Triggering Render deployment..."
        curl -X POST "${{ vars.RENDER_DEPLOY_HOOK_URL }}"
        echo "✅ Deployment triggered successfully"
    
    - name: Deploy to Railway
      if: vars.RAILWAY_PROJECT_ID != ''
      run: |
        echo "🚀 Deploying to Railway..."
        curl -X POST "https://backboard.railway.app/graphql" \
          -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "query": "mutation { projectTriggerDeploy(projectId: \"${{ vars.RAILWAY_PROJECT_ID }}\") { id } }"
          }'
        echo "✅ Railway deployment triggered"
    
    - name: Update deployment status
      run: |
        echo "🎉 Een AI Agent deployment completed!"
        echo "📊 Deployment Summary:"
        echo "   - Repository: ${{ github.repository }}"
        echo "   - Commit: ${{ github.sha }}"
        echo "   - Branch: ${{ github.ref_name }}"
        echo "   - Timestamp: $(date -u)"

  github-pages:
    name: Deploy GitHub Pages with Chat Widget
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: Install dependencies
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci
        else
          echo "No package-lock.json found, skipping npm install"
        fi
    
    - name: Verify chat widget integration
      run: |
        echo "🔍 Verifying chat widget files..."
        if [ -f "website/static/chat.js" ]; then
          echo "✅ Chat widget JavaScript found"
          # Basic validation
          if grep -q "EenChatWidget" website/static/chat.js; then
            echo "✅ Chat widget class found"
          else
            echo "❌ Chat widget class not found"
            exit 1
          fi
        else
          echo "❌ Chat widget JavaScript not found"
          exit 1
        fi
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Build GitHub Pages
      run: |
        echo "🏗️ Building GitHub Pages with AI chat integration..."
        
        # Copy website files to build directory
        mkdir -p _site
        cp -r website/* _site/
        
        # Ensure chat widget is included
        if [ ! -f "_site/static/chat.js" ]; then
          echo "❌ Chat widget not found in build"
          exit 1
        fi
        
        echo "✅ GitHub Pages build completed"
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, build-embeddings, deploy, github-pages]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "🎯 Een AI Agent Pipeline Summary"
        echo "================================"
        echo "Test: ${{ needs.test.result }}"
        echo "Embeddings: ${{ needs.build-embeddings.result }}"
        echo "Deploy: ${{ needs.deploy.result }}"
        echo "GitHub Pages: ${{ needs.github-pages.result }}"
        echo ""
        
        if [ "${{ needs.test.result }}" = "success" ] && 
           [ "${{ needs.build-embeddings.result }}" = "success" ] && 
           [ "${{ needs.deploy.result }}" = "success" ] && 
           [ "${{ needs.github-pages.result }}" = "success" ]; then
          echo "🎉 Full deployment successful!"
          echo "🌐 Website: https://nourimabrouk.github.io/Een/"
          echo "🤖 AI Chat: Integrated and operational"
        else
          echo "⚠️ Some jobs failed - check logs above"
        fi